
Pipeline for Deploying CNN Models on FPGA using Vitis AI with PYNQ Framework and PYNQ-DPU Overlay.
1. Software and Hardware Requirements (With brief details)
Software Requirements : Vitis AI, Vitis AI Docker, PYNQ, PYNQ OS, PYNQ DPU
Hardware Requirement: Host system with Ubuntu 20.04 or 22.04 LTS (64-bit), FPGA ZCU104 (or ZCU102, Ultra96 v2, Kria KV260 SOM, Pynq-ZU etc.)
o	Vitis AI is Xilinx’s unified AI development platform for deploying deep learning models on Xilinx hardware  including FPGAs, SoCs (like Zynq UltraScale+), and Alveo accelerator cards. It gives a complete toolchain to go from a trained deep learning model (TensorFlow, PyTorch, Caffe, etc.) → quantized → compiled → deployed on a Xilinx DPU (Deep Learning Processing Unit).
o	Vitis AI Docker is basically a prebuilt container provided by Xilinx that contains the entire Vitis AI development environment so it provides all the tools, dependencies, and compilers  without manually installing.
o	PYNQ (Python on Zynq) is an open-source framework developed initially by Xilinx (now AMD) for simplifying the use of FPGAs, especially Zynq-based Systems on Chips (SoCs), for applications like deep learning and convolutional neural network (CNN) deployment. PYNQ enables FPGA programming using Python and Jupyter Notebooks. 
o	PYNQ OS is a specialized Linux-based operating system that runs on FPGA platforms like Xilinx Zynq and similar adaptive computing boards. It is the foundation of the PYNQ framework, combining a pre-built Linux system with installed Python libraries, drivers, and the Jupyter Notebook server for interactive development. Supports running Python code that interacts with custom hardware overlays loaded into the FPGA fabric, directly from the operating system.
o	PYNQ DPU is a specialized hardware IP core (Intellectual Property block) developed by Xilinx/AMD and tailored for accelerating neural network computations (including convolution, pooling, activation, etc.), making FPGAs more suitable for real-time AI inference tasks.It refers to the Deep Learning Processing Unit (DPU) overlay for PYNQ, which enables hardware acceleration of deep learning models especially convolutional neural networks (CNNs) on Xilinx FPGA devices running the PYNQ environment.
o	The ZCU104 is an evaluation board from AMD/Xilinx featuring the Zynq UltraScale+ MPSoC (multiprocessor System-on-Chip). It is designed for rapid prototyping and development of advanced embedded systems, especially those requiring high-performance processing, machine learning, and real-time video or vision tasks.
Key Features
•	Zynq UltraScale+ MPSoC ZU7EV:
•	Quad-core ARM Cortex-A53 applications processor.
•	Dual-core ARM Cortex-R5 real-time processor.
•	Mali-400 MP2 graphics processing unit (GPU).
•	H.264/H.265 video codec capable of 4K60 resolution.
•	16nm FinFET+ programmable logic for custom hardware acceleration.
•	4GB DDR4 memory (processing system).
•	64MB DDR4 (programmable logic, via SODIMM slot for expansion).

2. Installation of required software and tools.
2.1  Installation of Vitis AI Docker (Host System)
       	Version : 2.5
System requirement: Install Ubuntu 20.04 or 22.04 LTS (64-bit)
Dockser is a platform for developing, shipping, and running applications in containers. A container is like a lightweight, portable virtual environment that packages everything your application needs code, libraries, dependencies, runtime so it runs the same way on any system.
•	Install first the docker using the link : https://docs.docker.com/engine/install/ubuntu/ 
•	Vitis AI docker 2.5 available in : https://hub.docker.com/r/xilinx/vitis-ai/tags 
•	Open Ubuntu Terminal, Check available docker images: >>docker images
•	Pull the docker Vitis AI 2.5.0 >> docker pull xilinx/vitis-ai:2.5.0
•	It will install vitis ai docker 2.5.0, it support both tensorflow1 and 2
•	After installation go to the specified directory of vitis ai via terminal and run the docker >> /home/user/Vitis-AI/docker_run.sh xilinx/vitis-ai:2.5

2.2 Install TensorFlow on GPU 
Install TensorFlow GPU and actually use GPU acceleration, your system needs to have a compatible graphics card. 
(NVIDIA GPU (TensorFlow GPU only supports CUDA-capable NVIDIA GPUs AMD GPUs aren’t supported natively). CUDA Toolkit and cuDNN installed (TensorFlow GPU version must match these versions exactly)
	Download and Install Anaconda: https://www.anaconda.com/download 
	Install NVIDIA Cuda and TensorFlow GPU (Open anaconda prompt)
	Install NVIDIA cuda >>> conda install cuda -c nvidia/label/cuda-11.6.0
	Check version>>> nvcc -V
	Check Nvidia GPU details>>> nvidia-smi
	Create a new environment with specific python version>>> conda create --name 	<env_name> python==3.9
	Activate the environment>>> conda activate <env_name>
	Install TensorFlow specific version>>> conda install tensorflow-gpu==1.15 or  
2.4.0
	Install Jupyter notebook>>> pip install jupyter
	Install required library like OpenCV, Matplotlib, Glob, Tqdm, Scikit-learn
	Activate the environment>>> conda activate tensorflow-gpu
	Open the Jupyter Notebook>>> jupyter notebook 

2.3 Load PYNQ Operating System and Install PYNQ DPU (on ZCU104)
Requirement : 16 GB(minimum) micro SD card
		PYNQ DPU:2.5.0 , PYNQ OS:3.0
•	Download the PYNQ Linux image tailored for ZCU104 from the official PYNQ site: https://www.pynq.io/boards.html 
•	Flash the image onto a microSD card using Balena Etcher(https://etcher.balena.io/ ) or similar tool
•	Insert the SD card and boot up the ZCU104 board (follow these instructions: https://pynq.readthedocs.io/en/v2.3/getting_started/zcu104_setup.html )
•	Connect to the board with USB cable via SSH or serial console or terminal emulator like Tera Term (https://teratermproject.github.io/index-en.html )
•	Open Tera Term : Select the serial port>setup>serial port>set speed:115200
•	Activate the internet with below code: (Connect the board to network via ethernet cable)
o	Disable “systemd-resolved” service:
>>>sudo systemctl disable systemd-resolved.service
o	Stop the service:
>>>sudo systemctl stop systemd-resolved.service
o	Remove the link to “/run/systemd/resolve/stub-resolv.conf” in “/etc/resolv.conf”
>>>sudo rm /etc/resolv.conf
o	Add a manually created “resolv.conf” in “/etc/”
>>>sudo vim /etc/resolv.conf
o	Add your prefered DNS server there
>>nameserver 8.8.8.8
•	Install PYNQ DPU(2.5.0) >>> pip3 install pynq-dpu --no-build-isolation
